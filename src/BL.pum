/********************************************************************************************************************************/
/*** BL.pum / Block list related functions & predicates                                                                       ***/
/********************************************************************************************************************************/
TRAFO BL TREE OB PUBLIC

 /*** Predicates ***/

 IsEmptyBlocklist                                                  /* Simple predicate                                          */

 /*** Pointer block list related functions ***/

 PtrBlocklistOfType                                                /* ... of a type                                             */
 PtrBlocklistOfModuleGlobals                                       /* ... for all module global variables                       */
 PtrBlocklistOfProcLocals                                          /* ... for all local variables of a procedure                */
 PtrBlocklistOfProcDecls                                           /* ... for all parameters and local variables of a procedure */
 
 /*** Procedure block list related functions ***/
 
 ProcBlocklistOfType                                               /* ... of a type                                             */
 ProcBlocklistOfModuleGlobals                                      /* ... for all module global variables                       */
 ProcBlocklistOfProcLocals                                         /* ... for all local variables of a procedure                */

/********************************************************************************************************************************/
IMPORT{ (* IMPORT ; *)

        TYPE   tAddress = OB.tAddress;
               tSize    = OB.tSize; }
                        
GLOBAL{ IMPORT ADR      ,
               LIM      ,
               T        ,
               UTI      ; }

/********************************************************************************************************************************/
/*$1*/
PREDICATE IsEmptyBlocklist ( Blocklists )

 NoBlocklist :- .

/*------------------------------------------------------------------------------------------------------------------------------*/
/*$1*/
FUNCTION HeightOfBlocklist ( Blocklists ) LONGINT

 Blocklist(prev,_,_,_,_,height) RETURN {UTI.MaxLI(HeightOfBlocklist(prev),height)} :- .
 ..                             RETURN 0                                           :- .
 
/*------------------------------------------------------------------------------------------------------------------------------*/
/*$1*/
FUNCTION AdjustIncr ( bl:Blocklists , elemSize:tSize ) Blocklists

        Blocklist(NoBlocklist      ,sub,ofs,count,incr      ,height),_ 
 RETURN Blocklist({OB.cNoBlocklist},sub,ofs,count,{elemSize},height) :-  CONDITION (count=1);.

        ..                                        
 RETURN bl                                                           :- .

/*------------------------------------------------------------------------------------------------------------------------------*/
/*$1*/
FUNCTION ConcatBlocklists ( b1:Blocklists , b2:Blocklists , base:tAddress ) Blocklists
     
        _     
      , NoBlocklist,.. 
 RETURN b1 :- .
 
        Blocklist(prev       ,sub1:Blocklists,ofs1,count1       ,incr1,height1)
      , Blocklist(NoBlocklist,sub2:Blocklists,ofs2,count2       ,incr2,height2),..
 RETURN Blocklist(prev       ,sub2           ,ofs1,count1+count2,incr2,height2)
 :- CONDITION (incr1 = incr2) 
            & (ofs1+count1*incr1 = base+ofs2) 
            & AreEqualBlocklists(sub1,sub2); .

        _
      , Blocklist(prev                          ,sub:Blocklists,ofs     ,count,incr,height),..
 RETURN Blocklist(ConcatBlocklists(b1,prev,base),sub           ,base+ofs,count,incr,height) :- .

/*------------------------------------------------------------------------------------------------------------------------------*/
/*$1*/
PREDICATE AreEqualBlocklists ( al:Blocklists , bl:Blocklists )

 NoBlocklist                            ,NoBlocklist                             :- .
 Blocklist(p1,s1:Blocklists,o1,c1,i1,h1),Blocklist(p2,s2:Blocklists,o2,c2,i2,h2) :- CONDITION (o1 = o2) 
                                                                                            & (c1 = c2) 
                                                                                            & (i1 = i2)
                                                                                            & (h1 = h2)
                                                                                            & AreEqualBlocklists(s1,s2)
                                                                                            & AreEqualBlocklists(p1,p2);.

/*------------------------------------------------------------------------------------------------------------------------------*/
/*$1*/
FUNCTION BlocklistOfArrayType ( elemBl:Blocklists , len:tSize , elemSize:tSize ) Blocklists
LOCAL{ VAR bl:OB.tOB; h:LONGINT; }

        NoBlocklist,.. 
 RETURN {OB.cNoBlocklist}                                                              :- .
										  
        Blocklist(NoBlocklist      ,sub:Blocklists,ofs,count    ,_       ,height  ),.. 
 RETURN Blocklist({OB.cNoBlocklist},sub           ,ofs,{len}    ,elemSize,height  )    :- CONDITION (count=1);.
						   		  
        Blocklist(NoBlocklist      ,sub:Blocklists,ofs,count    ,incr    ,height  ),.. 
 RETURN Blocklist({OB.cNoBlocklist},sub           ,ofs,count*len,incr    ,height  )    :- CONDITION (count*incr=elemSize);.
						   		  
        Blocklist(prev             ,sub:Blocklists,ofs,count    ,incr    ,height  ),.. 
 RETURN Blocklist(prev             ,sub           ,ofs,count    ,incr    ,height  )    :- CONDITION (len=1);.
        
        ..
 RETURN Blocklist({OB.cNoBlocklist},elemBl        ,0  ,{len}    ,elemSize,{h}     )    :-  
        {  h:=HeightOfBlocklist(elemBl); 
           IF (h>0) OR (len<0) OR (len>LIM.BlocklistLoopUnrollingThreshold) THEN INC(h); END;
        };.

/********************************************************************************************************************************/
/*** pointer block lists                                                                                                      ***/
/********************************************************************************************************************************/
/*$1*/
FUNCTION PtrBlocklistOfType ( t:TypeReprs ) Blocklists

 TypeRepr(_,_,TypeBlocklists(ptBl,_),..) RETURN ptBl              :-  { IF ptBl=NIL THEN ptBl:=CalcPtrBlocklist(t); END; };.
 ..                                      RETURN {OB.cNoBlocklist} :- .

/*------------------------------------------------------------------------------------------------------------------------------*/
/*$1*/
FUNCTION CalcPtrBlocklist ( t:TypeReprs ) Blocklists

 PointerTypeRepr                                        RETURN {OB.cPointerBlocklist}                                     :- .
 ArrayTypeRepr(_,_,_,_,_,len,e:TypeReprs)               RETURN PtrBlocklistOfOpenArrayType(t,0)    :- CONDITION
                                                                                                      (len=OB.OPENARRAYLEN);.
 ArrayTypeRepr(_,_,_,_,_,len,e:TypeRepr(_,elemSize,..)) RETURN BlocklistOfArrayType(PtrBlocklistOfType(e),{len},elemSize) :- .
 RecordTypeRepr(_,size,_,_,_,_,_,_,fields:Entries,_)    RETURN AdjustIncr(PtrBlocklistOfRecordType(fields),size)          :- .
 ..                                                     RETURN {OB.cNoBlocklist}                                          :- .
 
/*------------------------------------------------------------------------------------------------------------------------------*/
/*$1*/
FUNCTION PtrBlocklistOfOpenArrayType ( t:TypeReprs , odim:LONGINT ) Blocklists

 ArrayTypeRepr(_,_,_,_,_,len,e:TypeReprs),_ 
    RETURN PtrBlocklistOfOpenArrayType(e,odim+1) :- CONDITION (len=OB.OPENARRAYLEN);.

 ArrayTypeRepr(_,size,_,_,_,len,e:TypeRepr(_,elemSize,..)),_
    RETURN Blocklist(/* prev   := */ {OB.cNoBlocklist}
                    ,/* sub    := */ BlocklistOfArrayType(PtrBlocklistOfType(e),{len},elemSize)
                    ,/* ofs    := */ 0
                    ,/* count  := */ {-odim}
                    ,/* incr   := */ size
                    ,/* height := */ 0) :- .

 RecordTypeRepr(_,size,_,_,_,_,_,_,fields:Entries,_),_
    RETURN Blocklist(/* prev   := */ {OB.cNoBlocklist}
                    ,/* sub    := */ AdjustIncr(PtrBlocklistOfRecordType(fields),size)
                    ,/* ofs    := */ 0
                    ,/* count  := */ {-odim}
                    ,/* incr   := */ size
                    ,/* height := */ 0) :- .

 PointerTypeRepr,_
    RETURN Blocklist(/* prev   := */ {OB.cNoBlocklist}
                    ,/* sub    := */ {OB.cPointerBlocklist}
                    ,/* ofs    := */ 0
                    ,/* count  := */ {-odim}
                    ,/* incr   := */ 4
                    ,/* height := */ 0) :- .

 .. RETURN {OB.cNoBlocklist} :- .

/*------------------------------------------------------------------------------------------------------------------------------*/
/*$1*/
FUNCTION PtrBlocklistOfRecordType ( fields:Entries ) Blocklists

 VarEntry(prev:Entries,_,_,_,_,_,t:TypeReprs,_,_,_,ofs,_,_,_) RETURN ConcatBlocklists
                                                                     (/* b1   := */ PtrBlocklistOfRecordType(prev)
                                                                     ,/* b2   := */ PtrBlocklistOfType(t)
                                                                     ,/* base := */ ofs)            :- .
							        
 DataEntry(prev:Entries,..)                                   RETURN PtrBlocklistOfRecordType(prev) :- .
 							        
 ..                                                           RETURN {OB.cNoBlocklist}              :- .
 
/*------------------------------------------------------------------------------------------------------------------------------*/
/*$1*/
FUNCTION PtrBlocklistOfModuleGlobals ( decls:Entries ) Blocklists

 VarEntry(prev:Entries,_,_,_,_,_,t:TypeReprs,_,_,_,ofs,_,_,_) RETURN ConcatBlocklists
                                                                     (/* b1   := */ PtrBlocklistOfModuleGlobals(prev)
                                                                     ,/* b2   := */ AdjustIncr(PtrBlocklistOfType(t)
                                                                                              ,ADR.Align4(T.SizeOfType(t)))
                                                                     ,/* base := */ ofs)               :- .
	      				                    
 DataEntry(prev:Entries,..)                                   RETURN PtrBlocklistOfModuleGlobals(prev) :- .
 	       				                    
 ..                                                           RETURN {OB.cNoBlocklist}                 :- .
 
/*------------------------------------------------------------------------------------------------------------------------------*/
/*$1*/
FUNCTION PtrBlocklistOfProcLocals ( decls:Entries ) Blocklists

 .. RETURN PtrBlOfProcLocals(decls,{OB.cNoBlocklist}) :- .

/*------------------------------------------------------------------------------------------------------------------------------*/
/*$1*/
FUNCTION PtrBlOfProcLocals ( decls:Entries , b1:Blocklists ) Blocklists

 VarEntry(_           ,_,_,_,_,_,_          ,_,_,_,ofs,_,_,_),_ RETURN b1                         :- CONDITION (ofs>0);.
                                                            
 VarEntry(prev:Entries,_,_,_,_,_,t:TypeReprs,_,_,_,ofs,_,_,_),_ RETURN PtrBlOfProcLocals(prev
                                                                                        ,ConcatBlocklists
                                                                                         (/* b1   := */ b1
                                                                                         ,/* b2   := */ PtrBlocklistOfType(t)
                                                                                         ,/* base := */ ofs) 
                                                                                        )         :- .
                                                                     
 DataEntry(prev:Entries,..),_                                   RETURN PtrBlOfProcLocals(prev,b1) :- .
                                                                
 ..                                                             RETURN b1                         :- .
 
/*------------------------------------------------------------------------------------------------------------------------------*/
/*$1*/
FUNCTION PtrBlocklistOfProcDecls ( decls:Entries ) Blocklists

 .. RETURN PtrBlOfProcDecls(decls,{OB.cNoBlocklist}) :- .

/*------------------------------------------------------------------------------------------------------------------------------*/
/*$1*/
FUNCTION PtrBlOfProcDecls ( decls:Entries , b1:Blocklists ) Blocklists

 VarEntry(prev:Entries,_,_,_,_,_,t:TypeReprs,_,_,parMode,ofs,refMode,_,_),_ RETURN PtrBlOfProcDecls
                                                                                   (prev
                                                                                   ,ConcatBlocklists
                                                                                    (/* b1   := */ b1
                                                                                    ,/* b2   := */ PtrBlocklistOfType(t)
                                                                                    ,/* base := */ ofs) 
                                                                                   ) 
                                                                            :- CONDITION (parMode=OB.VALPAR);.
                                                                          
 DataEntry(prev:Entries,..),_                                               RETURN PtrBlOfProcDecls(prev,b1) :- .
                                                                            
 ..                                                                         RETURN b1 :- .
 
/********************************************************************************************************************************/
/*** procedure block lists                                                                                                    ***/
/********************************************************************************************************************************/
/*$1*/
FUNCTION ProcBlocklistOfType ( t:TypeReprs ) Blocklists

 TypeRepr(_,_,TypeBlocklists(_,prBl),..) RETURN prBl              :-  { IF prBl=NIL THEN prBl:=CalcProcBlocklist(t); END; };.
 ..                                      RETURN {OB.cNoBlocklist} :- .

/*------------------------------------------------------------------------------------------------------------------------------*/
/*$1*/
FUNCTION CalcProcBlocklist ( t:TypeReprs ) Blocklists

 ProcedureTypeRepr                                      RETURN {OB.cProcedureBlocklist}                                    :- .
 ArrayTypeRepr(_,_,_,_,_,len,e:TypeReprs)               RETURN ProcBlocklistOfOpenArrayType(t,0) :- CONDITION
                                                                                                    (len=OB.OPENARRAYLEN);.
 ArrayTypeRepr(_,_,_,_,_,len,e:TypeRepr(_,elemSize,..)) RETURN BlocklistOfArrayType(ProcBlocklistOfType(e),{len},elemSize) :- .
 RecordTypeRepr(_,size,_,_,_,_,_,_,fields:Entries,_)    RETURN AdjustIncr(ProcBlocklistOfRecordType(fields),size)          :- .
 ..                                                     RETURN {OB.cNoBlocklist}                                           :- .
 
/*------------------------------------------------------------------------------------------------------------------------------*/
/*$1*/
FUNCTION ProcBlocklistOfOpenArrayType ( t:TypeReprs , odim:LONGINT ) Blocklists

 ArrayTypeRepr(_,_,_,_,_,len,e:TypeReprs),_ 
    RETURN ProcBlocklistOfOpenArrayType(e,odim+1) :- CONDITION (len=OB.OPENARRAYLEN);.

 ArrayTypeRepr(_,size,_,_,_,len,e:TypeRepr(_,elemSize,..)),_
    RETURN Blocklist(/* prev   := */ {OB.cNoBlocklist}
                    ,/* sub    := */ BlocklistOfArrayType(ProcBlocklistOfType(e),{len},elemSize)
                    ,/* ofs    := */ 0
                    ,/* count  := */ {-odim}
                    ,/* incr   := */ size
                    ,/* height := */ 0) :- .

 RecordTypeRepr(_,size,_,_,_,_,_,_,fields:Entries,_),_
    RETURN Blocklist(/* prev   := */ {OB.cNoBlocklist}
                    ,/* sub    := */ AdjustIncr(ProcBlocklistOfRecordType(fields),size)
                    ,/* ofs    := */ 0
                    ,/* count  := */ {-odim}
                    ,/* incr   := */ size
                    ,/* height := */ 0) :- .

 ProcedureTypeRepr,_
    RETURN Blocklist(/* prev   := */ {OB.cNoBlocklist}
                    ,/* sub    := */ {OB.cProcedureBlocklist}
                    ,/* ofs    := */ 0
                    ,/* count  := */ {-odim}
                    ,/* incr   := */ 4
                    ,/* height := */ 0) :- .

 .. RETURN {OB.cNoBlocklist} :- .

/*------------------------------------------------------------------------------------------------------------------------------*/
/*$1*/
FUNCTION ProcBlocklistOfRecordType ( fields:Entries ) Blocklists

 VarEntry(prev:Entries,_,_,_,_,_,t:TypeReprs,_,_,_,ofs,_,_,_) RETURN ConcatBlocklists
                                                                     (/* b1   := */ ProcBlocklistOfRecordType(prev)
                                                                     ,/* b2   := */ ProcBlocklistOfType(t)
                                                                     ,/* base := */ ofs)             :- .
	      				                     
 DataEntry(prev:Entries,..)                                   RETURN ProcBlocklistOfRecordType(prev) :- .
 	       				                     
 ..                                                           RETURN {OB.cNoBlocklist}               :- .
 
/*------------------------------------------------------------------------------------------------------------------------------*/
/*$1*/
FUNCTION ProcBlocklistOfModuleGlobals ( decls:Entries ) Blocklists

 VarEntry(prev:Entries,_,_,_,_,_,t:TypeReprs,_,_,_,ofs,_,_,_) RETURN ConcatBlocklists
                                                                     (/* b1   := */ ProcBlocklistOfModuleGlobals(prev)
                                                                     ,/* b2   := */ AdjustIncr(ProcBlocklistOfType(t)
                                                                                              ,ADR.Align4(T.SizeOfType(t)))
                                                                     ,/* base := */ ofs) :- .
							          
 DataEntry(prev:Entries,..)                                   RETURN ProcBlocklistOfModuleGlobals(prev) :- .
 	       				                   
 ..                                                           RETURN {OB.cNoBlocklist}                  :- .
 
/*------------------------------------------------------------------------------------------------------------------------------*/
/*$1*/
FUNCTION ProcBlocklistOfProcLocals ( decls:Entries ) Blocklists

 .. RETURN ProcBlOfProcLocals(decls,{OB.cNoBlocklist}) :- .

/*------------------------------------------------------------------------------------------------------------------------------*/
/*$1*/
FUNCTION ProcBlOfProcLocals ( decls:Entries , b1:Blocklists ) Blocklists

 VarEntry(_           ,_,_,_,_,_,_          ,_,_,_,ofs,_,_,_),_ RETURN b1                          :- CONDITION (ofs>0);.
                                                            
 VarEntry(prev:Entries,_,_,_,_,_,t:TypeReprs,_,_,_,ofs,_,_,_),_ RETURN ProcBlOfProcLocals(prev
                                                                                         ,ConcatBlocklists
                                                                                          (/* b1   := */ b1
                                                                                          ,/* b2   := */ ProcBlocklistOfType(t)
                                                                                          ,/* base := */ ofs) 
                                                                                         )         :- .
                                                                     
 DataEntry(prev:Entries,..),_                                   RETURN ProcBlOfProcLocals(prev,b1) :- .
                                                                
 ..                                                             RETURN b1                          :- .
 
/********************************************************************************************************************************/
/*** END BL.pum                                                                                                               ***/
/********************************************************************************************************************************/

