#undef TRACEOUTPUT
#undef CODEOUTPUT

#ifdef TRACEOUTPUT
#define TRACE(MARK) O.StrLn( #MARK ) 
#else
#define TRACE(X) 
#endif

#ifdef CODEOUTPUT
#define SHOWCODE(MARK,CODE) O.Str( #MARK ); O.Str(' => '); O.Card(CARDINAL(CODE)); O.Ln
#else
#define SHOWCODE(MARK,CODE) 
#endif

/********************************************************************************************************************************/
/*** CODE.pum                                                                                                                 ***/
/********************************************************************************************************************************/
TRAFO CODE TREE CoderTree, OB PUBLIC

 Coder

/********************************************************************************************************************************/
GLOBAL{ IMPORT ADR,ARG,ASM,BL,CMT,CO,CODEf,Cons,CV,DRV,E,ERR,FIL,Idents,LAB,LIM,NDP,O,OT,Strings,T,Target,V; 
        FROM   ASM IMPORT al,ah,bl,bh,cl,ch,dl,dh,ax,bx,cx,dx,si,di,eax,ebx,ecx,edx,esi,edi,ebp,esp,b,w,l,s,S,i,x,iL,ioL,R,oLBIf,
               oLBI,oLB,oLIf,oL,o,oBIf,oBI,oB,oIf,LBIf,LBI,LB,LIf,L,BIf,BI,B,If;
        FROM   ASMOP IMPORT add,and,call,cld,imul,jmp,lea,leave,mov,movs,neg,not,or,popl,pushl,repz,ret,shl,shr,sub,rol,xor,fadd,
               fdiv,fmul,fsub;
        TYPE   tLevel                   = OB.tLevel                ; 
               tParMode                 = OB.tParMode              ;
               tRelation                = ASM.tRelation            ;
               ACode                    = Cons.Address             ;
               DCode                    = Cons.Data                ; 
               CondCode                 = Cons.Condition           ;
               BoolCode                 = Cons.Boolean             ;
               ArgCode                  = Cons.Arguments           ;
               ImplCode                 = Cons.Implicits           ;
               RetypeCode               = Cons.Retype              ;
               tLabel                   = LAB.T                    ; 

               tCaseLabelTab            = ARRAY [0..LIM.MaxCaseLabelRange-1] OF tLabel;
               tImplicitDesignationData = RECORD
                                           typeOfObject          : OB.tOB;
                                           isStackObject         : BOOLEAN; 
                                           acodeToObjHeader      : ACode;
                                           ofsOfObjHeader        : LONGINT; 
                                           ofsOfObject           : LONGINT; 
    
                                           ofsOfLEN0             : LONGINT; 
                                           ofsOfLastLEN          : LONGINT; 
                                           nofOpenIndexings      : LONGINT; 
                                           nofUnindexedLens      : LONGINT; 
                                           staticSize            : LONGINT; 
                                           codeToOpenIndexedElem : Cons.OpenIndexedElem;
                                           codeToObjBaseReg      : DCode;
                                          END;
        TYPE   RelOperRange             = [Tree.EqualOper..Tree.GreaterEqualOper];
        VAR    RelTab                   : ARRAY RelOperRange OF ASM.tRelation; 
               rel                      : RelOperRange; }

BEGIN{  FOR rel:=MIN(RelOperRange) TO MAX(RelOperRange) DO RelTab[rel]:=ASM.NoRelation; END;
        RelTab[Tree.EqualOper       ] := ASM.equal         ;
        RelTab[Tree.UnequalOper     ] := ASM.unequal       ;
        RelTab[Tree.LessOper        ] := ASM.less          ;
        RelTab[Tree.LessEqualOper   ] := ASM.lessORequal   ;
        RelTab[Tree.GreaterOper     ] := ASM.greater       ;
        RelTab[Tree.GreaterEqualOper] := ASM.greaterORequal; }

/********************************************************************************************************************************/
#include "CODE.pum.Stmts"
#include "CODE.pum.Assignments"
#include "CODE.pum.ProcCalls"
#include "CODE.pum.Exprs"
#include "CODE.pum.BooleanExprs"
#include "CODE.pum.Designators"
#include "CODE.pum.Predecls"

/********************************************************************************************************************************/
PREDICATE IsEmptyNode ( Tree )
 NIL             :- .
 mtImport        :- .
 mtDeclUnit      :- .
 mtDecl          :- .
 mtProc          :- .
 mtFPSection     :- .
 mtParId         :- .
 mtType          :- .
 mtArrayExprList :- .
 mtFieldList     :- .
 mtIdentList     :- .
 mtQualident     :- .
 mtStmt          :- .
 mtCase          :- .
 mtExpr          :- .

/********************************************************************************************************************************/
PREDICATE IsProperProcedure ( Procs )
 ProcDecl     (_,  _,FormalPars(_,mtType),_,_,_,_,_,_,_,_,_) :- .
 BoundProcDecl(_,_,_,FormalPars(_,mtType),_,_,_,_,_,_,_,_,_) :- . 

/********************************************************************************************************************************/
PROCEDURE Coder ()
 :- {
    CodeModule(FIL.ActP^.TreeRoot);
 };.

/********************************************************************************************************************************/
PROCEDURE CodeModule ( Module )
LOCAL{ VAR dummy,ptrBl:OB.tOB; fTempLabel:OB.tLabel; }

 Module(_,_,_,library,_,decls:DeclSection,stmts:Stmts,_,_,gSpace,tSpace,globals,tdesclist,_) :- { TRACE(CodeModule); 
    Target.Module(FIL.ActP^.SourceDir^,FIL.ActP^.Modulename^,gSpace); 
   
    IF ARG.OptionCommentsInAsm THEN CMT.Locals(globals); ASM.Ln; END;

    ptrBl:=BL.PtrBlocklistOfModuleGlobals(globals); 
    CODEf.GlobalTDesc(ptrBl); 
    CODEf.TDescList(tdesclist); 

    FIL.ActP^.ProcCount:=0; 
    CodeDecls(decls); 
   
    IF ARG.OptionCommentsInAsm THEN 
       ASM.SepLine; 
       ASM.CmtLnS('module init proc'); 
       ASM.CmtLnS("TSPACE = "); ASM.CmtI(tSpace); 
    END;
    Target.BeginModule(tSpace,LAB.New(fTempLabel));

    CODEf.VarInitializing((* bl       := *) ptrBl
                         ,(* isGlobal := *) TRUE
                         ,(* isPtr    := *) TRUE);
    CODEf.VarInitializing((* bl       := *) BL.ProcBlocklistOfModuleGlobals(globals)
                         ,(* isGlobal := *) TRUE
                         ,(* isPtr    := *) FALSE);

    NDP.Init(ADR.GlobalTmpBase-tSpace); 

    dummy:=DRV.ShowProcCount(dummy); 
    CodeStmts(stmts); 

    Target.EndModule(fTempLabel,NDP.UsedTempSize());
 };.

/*END CodeModule */ 
 
/********************************************************************************************************************************/
PROCEDURE CodeDecls ( Tree ) 

 DeclSection(d:DeclUnits,p:Procs) :-  CodeDecls(d); CodeProcs(p);.
 DeclUnit   (n:DeclUnits,d:Decls) :-  CodeDecls(d); CodeDecls(n);.
 ConstDecl  (n:Decls,_,_,e      ) :-  CodeConstValue({e}); CodeDecls(n);.
 Decl       (n:Decls            ) :-  CodeDecls(n);.
 
/*END CodeDecls */

/********************************************************************************************************************************/
PROCEDURE CodeProcs ( proc:Procs )

 ProcDecl        (next:Procs,_,_,_,_,_,_,_,  e,_,_,_) :- { CodeProc(e,proc,(* isBoundProc := *) FALSE); CodeProcs(next); };.
 BoundProcDecl   (next:Procs,_,_,_,_,_,_,_,_,e,_,_,_) :- { CodeProc(e,proc,(* isBoundProc := *) TRUE ); CodeProcs(next); };.

 ForwardDecl     (next:Procs,_,_                    );
 BoundForwardDecl(next:Procs,_,_,_                  ) :- {                                              CodeProcs(next); };.

/*END CodeProcs */

/********************************************************************************************************************************/
PROCEDURE DumpNamePath ( NamePaths )
             
 IdentNamePath      (prev:NamePaths,id) :- { DumpNamePath(prev); O.Ident(id  ); };.
 SelectNamePath     (prev:NamePaths   ) :- { DumpNamePath(prev); O.Str  ('.' ); };.
 IndexNamePath      (prev:NamePaths   ) :- { DumpNamePath(prev); O.Str  ('[]'); };.
 DereferenceNamePath(prev:NamePaths   ) :- { DumpNamePath(prev); O.Str  ('^' ); };.

/*END DumpNamePath */

/********************************************************************************************************************************/
PROCEDURE DumpNamePathOfEntry ( Entries )

 BoundProcEntry(_,_,_,_,_,_,_,_,_,_,_,np:NamePaths,..) ;
 ProcedureEntry(_,_,_,_,_,_,_,_,_  ,_,np:NamePaths,_ ) :-  DumpNamePath(np);.

/*END DumpNamePathOfEntry */

/********************************************************************************************************************************/
PROCEDURE CodeProc ( entry:Entries , proc:Procs , isBoundProc:BOOLEAN)
LOCAL{ VAR dummy:OB.tOB; procLabel,fTempLabel:OB.tLabel; idOfLocalSub:ASM.tOperId; nSpace,aSpace:LONGINT; }

 DataEntry(_,_,_,exportMode,level,_),ProcDecl     (_,_,_,  decls:DeclSection,stmts:Stmts,_,_,_,_,lSpace,tSpace,locals),_;
 DataEntry(_,_,_,exportMode,level,_),BoundProcDecl(_,_,_,_,decls:DeclSection,stmts:Stmts,_,_,_,_,lSpace,tSpace,locals),_
 :- { TRACE(CodeProc); 
    CodeDecls(decls);

    procLabel:=E.LabelOfEntry(entry); 
    IF ARG.OptionTraceProcNames THEN O.Str("BEGIN "); DumpNamePathOfEntry(entry); O.Ln; END;
    
    dummy:=DRV.ShowProcCount(dummy); 
    IF ARG.OptionCommentsInAsm THEN CMT.Procedure(entry,proc); END;

    CODEf.LocalTDesc(entry,BL.PtrBlocklistOfProcDecls(locals));

    ASM.Text;
    ASM.Align(2);
    IF (exportMode#OB.PRIVATE) OR isBoundProc THEN ASM.Globl(procLabel); END;
    ASM.Label(procLabel); 

 (* procedure prologue *)

    CODEf.StackFrameLinks(entry,lSpace+tSpace,LAB.New(fTempLabel),idOfLocalSub,aSpace);
    CODEf.RefdValParamsCopy((* SignatureRepr := *) E.SignatureOfProcEntry(entry));
    CODEf.VarInitializing  ((* bl            := *) BL.PtrBlocklistOfProcLocals(locals)
                           ,(* isGlobal      := *) FALSE
                           ,(* isPtr         := *) TRUE);
    CODEf.VarInitializing  ((* bl            := *) BL.ProcBlocklistOfProcLocals(locals)
                           ,(* isGlobal      := *) FALSE
                           ,(* isPtr         := *) FALSE);
    NDP.Init(ADR.LocalVarBase(level)-tSpace); 

 (* statements *)

    CodeStmts(stmts);

 (* procedure epilogue *)

    IF IsProperProcedure(proc) THEN 
       ASM.CS2( mov,l  ,  R(ebp),R(esp)      ); 
       ASM.C1 ( popl   ,  R(ebp)             );
       ASM.C0 ( ret                          ); 
    ELSE 
       ASM.C1 ( jmp  ,  L(LAB.FunctionFault) ); 
    END;

    nSpace:=aSpace+NDP.UsedTempSize();   
    IF lSpace+tSpace+nSpace=0 THEN 
       ASM.MakeObsolete(idOfLocalSub); 
    END;
    ASM.LabelDef(fTempLabel,nSpace); 
    ASM.Ln;

    IF ARG.OptionTraceProcNames THEN O.Str("BEGIN "); DumpNamePathOfEntry(entry); O.Ln; END;
 };.        
 
/*END CodeProc */

/********************************************************************************************************************************/
PROCEDURE CodeConstValue (Entries )

 ConstEntry(_,_,_,exportMode,_,_,_,StringValue(v),label) :- { TRACE(CodeConstValue.String); 
    CV.NamedString(v,label,(exportMode#OB.PRIVATE)); 
 };.

 ConstEntry(_,_,_,exportMode,_,_,_,RealValue(v),label) :- { TRACE(CodeConstValue.Real); 
    CV.NamedReal(v,label,(exportMode#OB.PRIVATE)); 
 };.

 ConstEntry(_,_,_,exportMode,_,_,_,LongrealValue(v),label) :- { TRACE(CodeConstValue.Longreal); 
    CV.NamedLongreal(v,label,(exportMode#OB.PRIVATE)); 
 };.

/*END CodeConstValue */

/********************************************************************************************************************************/
PROCEDURE CodeValue ( ValueReprs , TypeReprs , Coercion => DCode )
LOCAL{ VAR acode:ACode; dcode:DCode; }

 BooleanValue (v) ,_               ,_                => {dcode} :- { Cons.BooleanConst (v,dcode); };.
 CharValue    (v) ,_               ,_                => {dcode} :- { Cons.CharConst    (v,dcode); };.
 SetValue     (v) ,_               ,_                => {dcode} :- { Cons.SetConst     (v,dcode); };.
 IntegerValue (v) ,_               ,Shortint2Integer => {dcode} :- { Cons.IntegerConst (v,dcode); };.
 IntegerValue (v) ,_               ,Shortint2Longint => {dcode} :- { Cons.LongintConst (v,dcode); };.
 IntegerValue (v) ,_               ,Integer2Longint  => {dcode} :- { Cons.LongintConst (v,dcode); };.
 IntegerValue (v) ,ShortintTypeRepr,_                => {dcode} :- { Cons.ShortintConst(v,dcode); };.
 IntegerValue (v) ,IntegerTypeRepr ,_                => {dcode} :- { Cons.IntegerConst (v,dcode); };.
 IntegerValue (v) ,_               ,_                => {dcode} :- { Cons.LongintConst (v,dcode); };.
 NilValue         ,_               ,_                => {dcode} :- { Cons.LongintConst (0,dcode); };.
 NilPointerValue  ,_               ,_                => {dcode} :- { Cons.LongintConst (0,dcode); };.

 RealValue    (v) ,_               ,_                => {dcode} :- { Cons.GlobalVariable(CV.Real(v),0,Idents.NoIdent,acode); 
                                                                     Cons.FloatContentOf(s,acode,dcode); };.
 LongrealValue(v) ,_               ,_                => {dcode} :- { Cons.GlobalVariable(CV.Longreal(v),0,Idents.NoIdent,acode); 
                                                                     Cons.FloatContentOf(l,acode,dcode); };.
 StringValue  (v) ,_               ,_                => {dcode} :- { Cons.GlobalVariable(CV.String(v),0,Idents.NoIdent,acode); 
                                                                     Cons.AddressOf(acode,dcode); };.
 NilProcedureValue,_               ,_                => {dcode} :- { Cons.GlobalVariable(LAB.NILPROC,0,Idents.NoIdent,acode); 
                                                                     Cons.AddressOf(acode,dcode); };.

 .. => NIL ?{ ERR.Fatal('CODE.CodeValue: failed'); };.

/*END CodeValue */

/********************************************************************************************************************************/
/*** END CODE.pum                                                                                                             ***/
/********************************************************************************************************************************/

